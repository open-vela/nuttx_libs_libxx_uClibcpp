/*	Copyright (C) 2005 Garrett A. Kajmowicz

	This file is part of the uClibc++ Library.
	This library is free software; you can redistribute it and/or
	modify it under the terms of the GNU Lesser General Public
	License as published by the Free Software Foundation; either
	version 2.1 of the License, or (at your option) any later version.

	This library is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
	Lesser General Public License for more details.

	You should have received a copy of the GNU Lesser General Public
	License along with this library; if not, write to the Free Software
	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

#include <basic_definitions>

#ifndef __HEADER_TYPE_TRAITS
#define __HEADER_TYPE_TRAITS 1

#pragma GCC visibility push(default)

namespace std{

	template <class T, T v> struct _UCXXEXPORT integral_constant {
		static const T value = v;
		typedef T value_type;
		typedef integral_constant type;
		operator T() const _UCXX_USE_NOEXCEPT{ return v; }
		T operator()() const _UCXX_USE_NOEXCEPT{ return v; }
	};

	typedef integral_constant<bool,true> true_type;
	typedef integral_constant<bool,false> false_type;

	template <class T, class U> struct _UCXXEXPORT is_same : public false_type {};
	template <class T> struct _UCXXEXPORT is_same<T, T>    : public true_type  {};

	template <class T> struct _UCXXEXPORT is_reference      : public false_type {};
	template <class T> struct _UCXXEXPORT is_reference<T&>  : public true_type  {};
	template <class T> struct _UCXXEXPORT is_reference<T&&> : public true_type  {};

	template<bool C, class T, class F> struct _UCXXEXPORT conditional      {typedef T type; };
	template<class T, class F> struct _UCXXEXPORT conditional<false, T, F> {typedef F type; };

	template <class T> struct _UCXXEXPORT remove_reference      { typedef T type; };
	template <class T> struct _UCXXEXPORT remove_reference<T&>  { typedef T type; };
	template <class T> struct _UCXXEXPORT remove_reference<T&&> { typedef T type; };

	template <class T> struct _UCXXEXPORT is_const          : public false_type {};
	template <class T> struct _UCXXEXPORT is_const<T const> : public true_type  {};

	template <class T> struct _UCXXEXPORT is_volatile             : public false_type {};
	template <class T> struct _UCXXEXPORT is_volatile<T volatile> : public true_type  {};

	template <class T> struct _UCXXEXPORT remove_cv                   { typedef T type; };
	template <class T> struct _UCXXEXPORT remove_cv<const T>          { typedef T type; };
	template <class T> struct _UCXXEXPORT remove_cv<volatile T>       { typedef T type; };
	template <class T> struct _UCXXEXPORT remove_cv<const volatile T> { typedef T type; };

	// apply_cv
	// add const and/or volatile back to type.
	template <class T, class U, bool = is_const<typename remove_reference<T>::type>::value,
                                bool = is_volatile<typename remove_reference<T>::type>::value>
	struct _UCXXEXPORT apply_cv { typedef U type; };

	template <class T, class U> struct _UCXXEXPORT apply_cv<T,  U, true, false>  { typedef const U type; };
	template <class T, class U> struct _UCXXEXPORT apply_cv<T,  U, false, true>  { typedef volatile U type; };
	template <class T, class U> struct _UCXXEXPORT apply_cv<T,  U, true, true>   { typedef const volatile U type; };
	template <class T, class U> struct _UCXXEXPORT apply_cv<T,  U, false, false> { typedef U type; };
	template <class T, class U> struct _UCXXEXPORT apply_cv<T&, U, true, false>  { typedef const U& type; };
	template <class T, class U> struct _UCXXEXPORT apply_cv<T&, U, false, true>  { typedef volatile U& type; };
	template <class T, class U> struct _UCXXEXPORT apply_cv<T&, U, true, true>   { typedef const volatile U& type; };
	template <class T, class U> struct _UCXXEXPORT apply_cv<T&, U, false, false> { typedef U& type; };

	// is_integer
	template <class I> class _UCXXEXPORT __is_integer{
	public:
		typedef false_type value;
	};

	template <> class _UCXXEXPORT __is_integer <unsigned int>{
	public:
		typedef true_type value;
	};

	template <> class _UCXXEXPORT __is_integer <signed int>{
	public:
		typedef true_type value;
	};

	template <> class _UCXXEXPORT __is_integer <short unsigned int>{
	public:
		typedef true_type value;
	};

	template <> class _UCXXEXPORT __is_integer <short signed int>{
	public:
		typedef true_type value;
	};

	template <> class _UCXXEXPORT __is_integer <char>{
	public:
		typedef true_type value;
	};

	template <> class _UCXXEXPORT __is_integer <signed char>{
	public:
		typedef true_type value;
	};

	template <> class _UCXXEXPORT __is_integer <unsigned char>{
	public:
		typedef true_type value;
	};

	template <> class _UCXXEXPORT __is_integer <long unsigned int>{
	public:
		typedef true_type value;
	};

	template <> class _UCXXEXPORT __is_integer <long signed int>{
	public:
		typedef true_type value;
	};



}

#pragma GCC visibility pop

#endif

