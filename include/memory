/*	Copyright (C) 2004 Garrett A. Kajmowicz

	This file is part of the uClibc++ Library.

	This library is free software; you can redistribute it and/or
	modify it under the terms of the GNU Lesser General Public
	License as published by the Free Software Foundation; either
	version 2.1 of the License, or (at your option) any later version.

	This library is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
	Lesser General Public License for more details.

	You should have received a copy of the GNU Lesser General Public
	License along with this library; if not, write to the Free Software
	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

#include <new>
#include <cstddef>
#include <cstdlib>
#include <iterator_base>
#include <utility>
#include <cstdio>
#include <type_traits>

#ifndef HEADER_STD_MEMORY
#define HEADER_STD_MEMORY 1

#pragma GCC visibility push(default)

namespace std{

template <class T> class allocator;
	// Specialize for void:

template <> class _UCXXEXPORT allocator<void> {
public:
	typedef void*       pointer;
	typedef const void* const_pointer;
	typedef void  value_type;
	template <class U> struct rebind { typedef allocator<U> other; };
};

template <class T> class _UCXXEXPORT allocator{
public:
	typedef T value_type;
	typedef size_t size_type;
	typedef ptrdiff_t difference_type;
	
	typedef T* pointer;
	typedef const T* const_pointer;

	typedef T& reference;
	typedef const T& const_reference;

	pointer address(reference r) const { return &r; }
	const_pointer address(const_reference r) const { return &r; }
	
	allocator() _UCXX_USE_NOEXCEPT{}
	template <class U> allocator(const allocator<U>& ) _UCXX_USE_NOEXCEPT;
	~allocator() _UCXX_USE_NOEXCEPT{}

	//Space for n Ts
	pointer allocate(size_type n, typename allocator<void>::const_pointer = 0){
		return static_cast<T*>(::operator new( n * sizeof(T) ));
	}
	void deallocate(pointer p, size_type){
		::operator delete(p);
	}

	//Use placement new to engage the constructor
	void construct(pointer p, const T& val) { new(static_cast<void*>(p)) T(val); }
	void destroy(pointer p){ (static_cast<T*>(p))->~T(); }	//Call destructor

	size_type max_size() const _UCXX_USE_NOEXCEPT;
	template<class U> struct rebind { typedef allocator<U> other; };

};

template <class Out, class T> class _UCXXEXPORT raw_storage_iterator
	: public iterator<output_iterator_tag, void, void, void, void>
{
		Out p;

public:
	explicit raw_storage_iterator(Out pp) : p (pp) {  }
	raw_storage_iterator & operator*() { return *this; }
	raw_storage_iterator & operator=(const T& val) {
		T* pp = &*p;
		new(pp) T(val);
		return *this;
	}

	raw_storage_iterator & operator++() { ++p; return *this; }
	raw_storage_iterator operator++(int) {
		raw_storage_iterator t = *this;
		++p;
		return t;
	}
};

template <class T> _UCXXEXPORT pair<T*, ptrdiff_t> get_temporary_buffer(ptrdiff_t n){
	pair<T*, ptrdiff_t> retval;
	retval.first = static_cast<T*>(malloc(n * sizeof(T)));
	if(retval.first == 0){
		retval.second = 0;
	}else{
		retval.second = n;
	}
	return retval;
}

template <class T> _UCXXEXPORT void return_temporary_buffer(T* p){
	free(p);
}


template <class T> class _UCXXEXPORT auto_ptr{

private:
	T * object;
	template <class Y> struct auto_ptr_ref{
		Y * p;
	};

public:

	typedef T element_type;

	explicit auto_ptr(T* p =0) _UCXX_USE_NOEXCEPT : object(p){  }
	auto_ptr(auto_ptr& p) _UCXX_USE_NOEXCEPT : object(p.release()){ }
	auto_ptr(auto_ptr_ref<T> r) _UCXX_USE_NOEXCEPT : object(r.p){
		r.p = 0;
	}
	template<class Y> auto_ptr(auto_ptr<Y>& p) _UCXX_USE_NOEXCEPT : object(p.release()){ }
	auto_ptr& operator=(auto_ptr& p) _UCXX_USE_NOEXCEPT{
		if(&p == this){
			return *this;
		}
		delete object;
		object = p.release();
		return *this;
	}
	template<class Y> auto_ptr& operator=(auto_ptr<Y>& p) _UCXX_USE_NOEXCEPT{
		if(&p == this){
			return *this;
		}
		delete object;
		object = p.release();
		return *this;
	}
	~auto_ptr(){
		delete object;
	}

	T& operator*() const _UCXX_USE_NOEXCEPT{
		return *object;
	}
	T* operator->() const _UCXX_USE_NOEXCEPT{
		return object;
	}
	T* get() const _UCXX_USE_NOEXCEPT{
		return object;
	}
	T* release() _UCXX_USE_NOEXCEPT{
		T * temp(object);
		object = 0;
		return temp;
	}
	void reset(T * p=0) _UCXX_USE_NOEXCEPT{
		if(p != object){
			delete object;
			object = p;
		}
	}
	template<class Y> operator auto_ptr_ref<Y>() _UCXX_USE_NOEXCEPT{
		auto_ptr_ref<Y> retval;
		retval.p = object;
		object = 0;
		return retval;
	}
	template<class Y> operator auto_ptr<Y>() _UCXX_USE_NOEXCEPT{
		auto_ptr<Y> retval(object);
		object = 0;
		return retval;
	}
	
};

template <class T> struct _UCXXEXPORT default_delete{

public:
	default_delete() _UCXX_USE_NOEXCEPT = default;

	template <class U>
	default_delete(const default_delete<U>&) _UCXX_USE_NOEXCEPT{}

	void operator()(T* x) const _UCXX_USE_NOEXCEPT{
		delete x;
	}
};

template <class T> struct _UCXXEXPORT default_delete<T[]>{

public:
	default_delete() _UCXX_USE_NOEXCEPT = default;

	template <class U>
	default_delete(const default_delete<U[]>&) _UCXX_USE_NOEXCEPT{};

	void operator()(T* x) const _UCXX_USE_NOEXCEPT{
		delete[] x;
	}
};

template <class T, class D = default_delete<T> > class _UCXXEXPORT unique_ptr {

private:
	T *object;
	D deleter;

public:
	typedef T* pointer;
	typedef T element_type;
	typedef D deleter_type;

	// default constructor
	unique_ptr() _UCXX_USE_NOEXCEPT : object(pointer()) {}

	// null pointer constructor
	unique_ptr(nullptr_t) _UCXX_USE_NOEXCEPT : object(pointer()) {}

	// pointer constructor
	explicit unique_ptr(pointer p) _UCXX_USE_NOEXCEPT : object(p) {}

	// construct from pointer + lvalue deleter
	unique_ptr(pointer p, typename conditional<
		is_reference<deleter_type>::value, deleter_type, const deleter_type&
	>::type d)
	_UCXX_USE_NOEXCEPT : object(p), deleter(d) {}

	// construct from pointer + rvalue deleter
	unique_ptr(pointer p, typename remove_reference<deleter_type>::type&& d)
	_UCXX_USE_NOEXCEPT : object(p), deleter(std::move(d)) {}

	// construct from nullptr + lvalue deleter
	unique_ptr(nullptr_t, typename conditional<
		is_reference<deleter_type>::value, deleter_type, const deleter_type&
	>::type d)
	_UCXX_USE_NOEXCEPT : object(pointer()), deleter(d) {}

	// construct from nullptr + rvalue deleter
	unique_ptr(nullptr_t, typename remove_reference<deleter_type>::type&& d)
	_UCXX_USE_NOEXCEPT : object(pointer()), deleter(std::move(d)) {}

	// move constructor
	unique_ptr(unique_ptr&& u) _UCXX_USE_NOEXCEPT
	: object(u.release()), deleter(std::forward<deleter_type>(u.get_deleter())) {}

	// move-cast constructor
	template <class U, class E>
	unique_ptr(unique_ptr<U,E>&& u) _UCXX_USE_NOEXCEPT
	: object(u.release()), deleter(std::forward<E>(u.get_deleter())) {}

	// construct from auto_ptr
	template <class U>
	unique_ptr(auto_ptr<U>&& a) _UCXX_USE_NOEXCEPT
	: object(a.release()) {}

	// copy (deleted!)
	unique_ptr(const unique_ptr&) = delete;

	~unique_ptr() {
		reset();
	}

	// move assignment
	unique_ptr& operator=(unique_ptr&& u) _UCXX_USE_NOEXCEPT{
		reset(u.release());
		get_deleter() = std::forward<deleter_type>(u.get_deleter());
		return *this;
	}

	// assign null pointer
	unique_ptr& operator=(nullptr_t) _UCXX_USE_NOEXCEPT{
		reset();
		return *this;
	}

	// type-cast assignment
	template <class U, class E>
	unique_ptr& operator=(unique_ptr<U,E>&& u) _UCXX_USE_NOEXCEPT{
		reset(u.release());
		get_deleter() = std::forward<E>(u.get_deleter());
		return *this;
	}

	// assign auto_ptr
	template <class U>
	unique_ptr& operator=(auto_ptr<U> a) _UCXX_USE_NOEXCEPT{
		reset(a.release());
		return *this;
	}

	// copy assignment (deleted!)
	unique_ptr& operator=(const unique_ptr&) = delete;

	// observers
	element_type& operator*() const {
		return *object;
	}

	pointer operator->() const _UCXX_USE_NOEXCEPT{
		return object;
	}

	pointer get() const _UCXX_USE_NOEXCEPT{
		return object;
	}

	deleter_type& get_deleter() _UCXX_USE_NOEXCEPT{
		return deleter;
	}

	const deleter_type& get_deleter() const _UCXX_USE_NOEXCEPT{
		return deleter;
	}

	explicit operator bool() const _UCXX_USE_NOEXCEPT{
		return object != nullptr;
	}

	// modifiers
	pointer release() _UCXX_USE_NOEXCEPT{
		pointer tmp = object;
		object = pointer();
		return tmp;
  	}

	void reset(pointer p) _UCXX_USE_NOEXCEPT{
		pointer tmp = object;
		object = p;
		if (tmp)
			deleter(tmp);
	}

	void reset(nullptr_t = nullptr) _UCXX_USE_NOEXCEPT{
		pointer tmp = object;
		object = nullptr;
		if (tmp)
			deleter(tmp);
	}

	void swap(unique_ptr& u) _UCXX_USE_NOEXCEPT{
		swap(object, u.object);
		swap(deleter, u.deleter);
	}
};

template <class T, class D> class unique_ptr<T[], D>{

private:
	T *object;
	D deleter;

public:
	typedef T* pointer;
	typedef T element_type;
	typedef D deleter_type;

	// default constructor
	unique_ptr() _UCXX_USE_NOEXCEPT : object(pointer()) {}

	// null pointer constructor
	unique_ptr(nullptr_t) _UCXX_USE_NOEXCEPT : object(pointer()) {}

	// pointer constructor
	explicit unique_ptr(pointer p) _UCXX_USE_NOEXCEPT : object(p) {}

	// construct from pointer + lvalue deleter
	unique_ptr(pointer p, typename conditional<
		is_reference<deleter_type>::value, deleter_type, const deleter_type&
	>::type d)
	_UCXX_USE_NOEXCEPT : object(p), deleter(d) {}

	// construct from pointer + rvalue deleter
	unique_ptr(pointer p, typename remove_reference<deleter_type>::type&& d)
	_UCXX_USE_NOEXCEPT : object(p), deleter(std::move(d)) {}

	// construct from nullptr + lvalue deleter
	unique_ptr(nullptr_t, typename conditional<
		is_reference<deleter_type>::value, deleter_type, const deleter_type&
	>::type d)
	_UCXX_USE_NOEXCEPT : object(pointer()), deleter(d) {}

	// construct from nullptr + rvalue deleter
	unique_ptr(nullptr_t, typename remove_reference<deleter_type>::type&& d)
	_UCXX_USE_NOEXCEPT : object(pointer()), deleter(std::move(d)) {}

	// move constructor
	unique_ptr(unique_ptr&& u) _UCXX_USE_NOEXCEPT
	: object(u.release()), deleter(std::forward<deleter_type>(u.get_deleter())) {}

	// move-cast constructor
	template <class U, class E>
	unique_ptr(unique_ptr<U,E>&& u) _UCXX_USE_NOEXCEPT
	: object(u.release()), deleter(std::forward<E>(u.get_deleter())) {}

	// copy (deleted!)
	unique_ptr(const unique_ptr&) = delete;

	~unique_ptr() {
		reset();
	}

	// move assignment
	unique_ptr& operator=(unique_ptr&& u) _UCXX_USE_NOEXCEPT{
		reset(u.release());
		get_deleter() = std::forward<deleter_type>(u.get_deleter());
		return *this;
	}

	// assign null pointer
	unique_ptr& operator=(nullptr_t) _UCXX_USE_NOEXCEPT{
		reset();
		return *this;
	}

	// type-cast assignment
	template <class U, class E>
	unique_ptr& operator=(unique_ptr<U,E>&& u) _UCXX_USE_NOEXCEPT{
		reset(u.release());
		get_deleter() = std::forward<E>(u.get_deleter());
		return *this;
	}

	// copy assignment (deleted!)
	unique_ptr& operator=(const unique_ptr&) = delete;

	// observers
	element_type& operator[](size_t i) const {
		return object[i];
	}

	pointer get() const _UCXX_USE_NOEXCEPT{
		return object;
	}

	deleter_type& get_deleter() _UCXX_USE_NOEXCEPT{
		return deleter;
	}

	const deleter_type& get_deleter() const _UCXX_USE_NOEXCEPT{
		return deleter;
	}

	explicit operator bool() const _UCXX_USE_NOEXCEPT{
		return object != nullptr;
	}

	// modifiers
	pointer release() _UCXX_USE_NOEXCEPT{
		pointer tmp = object;
		object = pointer();
		return tmp;
  	}

	template <class P>
	void reset(P p) _UCXX_USE_NOEXCEPT{
		pointer tmp = object;
		object = p;
		if (tmp)
			deleter(tmp);
	}

	void reset(nullptr_t = nullptr) _UCXX_USE_NOEXCEPT{
		pointer tmp = object;
		object = nullptr;
		if (tmp)
			deleter(tmp);
	}

	void swap(unique_ptr& u) _UCXX_USE_NOEXCEPT{
		swap(object, u.object);
		swap(deleter, u.deleter);
	}
};

template <class T1, class D1, class T2, class D2>
inline bool operator==(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y) {
	return x.get() == y.get();
}

template <class T1, class D1>
inline bool operator==(const unique_ptr<T1, D1>& x, nullptr_t) {
	return !x;
}

template <class T1, class D1>
inline bool operator==(nullptr_t, const unique_ptr<T1, D1>& x) {
	return !x;
}

template <class T1, class D1, class T2, class D2>
inline bool operator!=(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y) {
	return x.get() != y.get();
}

template <class T1, class D1>
inline bool operator!=(const unique_ptr<T1, D1>& x, nullptr_t) {
	return static_cast<bool>(x);
}

template <class T1, class D1>
inline bool operator!=(nullptr_t, const unique_ptr<T1, D1>& x) {
	return static_cast<bool>(x);
}

}	//namespace std

#pragma GCC visibility pop

#endif

