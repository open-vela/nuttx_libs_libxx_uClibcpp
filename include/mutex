/*	Copyright (C) 2021 Xiaomi Corporation

	This file is part of the uClibc++ Library.

	This library is free software; you can redistribute it and/or
	modify it under the terms of the GNU Lesser General Public
	License as published by the Free Software Foundation; either
	version 2.1 of the License, or (at your option) any later version.

	This library is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
	Lesser General Public License for more details.

	You should have received a copy of the GNU Lesser General Public
	License along with this library; if not, write to the Free Software
	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

#ifndef __STD_HEADER_MUTEX
#define __STD_HEADER_MUTEX 1

#include <basic_definitions>
#include <pthread.h>

#pragma GCC visibility push(default)

namespace std{

class _UCXXEXPORT mutex {
private:
    pthread_mutex_t pthread_mutex;

public:
    mutex() _UCXX_USE_NOEXCEPT{ pthread_mutex_init(&pthread_mutex, nullptr); }
    ~mutex() _UCXX_USE_NOEXCEPT{ pthread_mutex_destroy(&pthread_mutex); };

    mutex(const mutex&) = delete;
    mutex& operator=(const mutex&) = delete;

    void lock() { pthread_mutex_lock(&pthread_mutex); }
    bool try_lock() { return pthread_mutex_trylock(&pthread_mutex) == 0; }
    void unlock() { pthread_mutex_unlock(&pthread_mutex); }

    typedef pthread_mutex_t* native_handle_type;
    native_handle_type native_handle() { return &pthread_mutex; }
};

struct adopt_lock_t { explicit adopt_lock_t() = default; };

template<class Mutex> class _UCXXEXPORT lock_guard {
public:
    typedef Mutex mutex_type;

private:
    mutex_type& mutex;

public:
    explicit lock_guard(mutex_type& m) : mutex(m) { mutex.lock(); }
    lock_guard(mutex_type& m, adopt_lock_t) : mutex(m) {}
    ~lock_guard() { mutex.unlock(); }

    lock_guard (const lock_guard&) = delete;
    lock_guard& operator=(lock_guard const&) = delete;
};


} // namespace std

#pragma GCC visibility pop

#endif
